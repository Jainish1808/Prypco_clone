Role
You are a full-stack developer with expertise in Python (FastAPI), React, and blockchain development, specifically with the XRP Ledger. Your task is to build a functional, full-stack, tokenized real estate investment platform for a local development environment. You will be responsible for developing the robust backend services, an intuitive frontend, and the secure integration with the blockchain using MongoDB as the database.
Persona
As the lead engineer on this project, you are building a proof-of-concept application. Your focus is on clean architecture, rapid implementation of core features, and seamless integration between the frontend, backend, and blockchain. You are building this for demonstration and testing purposes, so deployment and government regulatory features are not a concern. You prioritize a logical data structure in a NoSQL environment and a clear, functional user interface.
Context
The project is to create a full-stack application that facilitates the fractional ownership of real-world assets through digital tokens. This is a local-only project, not for deployment. It will use a MongoDB database and will abstract all regulatory concepts into simple, generic terms. The platform will have two primary user interfaces: an Investor Panel and a Seller Panel.
Detailed Task Description
1. Backend Development (Python & FastAPI with MongoDB)
You will build the core services using a microservices-inspired architecture with FastAPI and MongoDB as the database.
Core Services:
User & KYC Service: Manage user accounts and a simplified identity verification status (e.g., a boolean is_kyc_verified).
Property Catalog Service: Store and retrieve all property-related data in MongoDB.
Tokenization Orchestrator: Automate the process of creating and distributing tokens for new properties. This can be triggered by an API call and run as a background task.[1][2][3][4][5]
Fraction Allocation Service: Handle the logic for assigning tokens to investors after a successful purchase.
Rental Income & Distribution Service: Calculate and manage the distribution of rental income to token holders.
Secondary Market Engine: Facilitate the matching of buy and sell orders.[6][7][8][9][10]
Blockchain Adapter: Your primary interface with the XRP Ledger Testnet.
Database (MongoDB with Beanie ODM):
Schema Design: Design MongoDB schemas for Users, Properties, and Transactions.[11][12][13]
Users Collection: Store user credentials (hashed password), KYC status, and wallet information.
Properties Collection: Store property details (address, value, size), seller information, tokenization details (token name, total supply), legal document paths, and status (e.g., "Pending Review", "Approved").[11][14]
Transactions Collection: Log all significant events, such as token purchases, sales, and income distributions, including the XRP Ledger transaction hash.
Integration: Use Beanie as the asynchronous Object-Document Mapper (ODM) to interact with MongoDB from your FastAPI application.[15][16][17][18][19]
API Endpoints:
User Endpoints:
POST /users/register: Register a new user.
POST /users/login: Authenticate a user and provide a JWT token.[20][21][22][23]
POST /users/kyc-submit: Process simplified KYC information and update user status.
Property Endpoints (For Investors):
GET /properties: List all "Approved" properties.
GET /properties/{id}: Get detailed information on a specific property.
POST /properties/{id}/invest: Initiate a token purchase.
Property Endpoints (For Sellers):
POST /seller/property/submit: A key endpoint for sellers to submit property details and documents.
GET /seller/property/{id}: View a seller's submitted property status.
GET /seller/properties: List all properties submitted by the current seller.
Transaction Endpoints:
GET /investor/holdings: View an investor's current token holdings.
GET /investor/transactions: View an investor's transaction history.
GET /investor/income-statements: View rental income statements.
Secondary Market Endpoints:
POST /market/buy: Submit a buy order for tokens.
POST /market/sell: Submit a sell order for tokens.
Blockchain Integration (using xrpl-py on Testnet):[24][25]
Trust Lines: Programmatically establish trust lines between the platform's issuer account and investor wallets for each property token.[26][27][28][29][30][31]
Token Minting: Implement the logic to create a fixed supply of fungible tokens for each new property on the XRP Ledger.[27][32]
Token Distribution: Write functions to securely transfer tokens from the issuer's wallet to an investor's wallet upon a successful purchase.
Transaction Record: Store the transaction hash and other relevant data in your MongoDB Transactions collection for auditing and user display.[33]
Mathematical Logic Implementation:
You must implement the following formulas precisely in your backend code:
Token Price (P): P = V / N (where V is the property value, N is the total number of tokens).
Total Tokens (N): N = S * 10,000 (where S is the property size in square meters).
Ownership Fraction (F): F = k / N (where k is the number of tokens purchased).
Rental Income Share (I): I = (k / N) * R (where R is the total rental income).
2. Frontend Development (React)
Investor Panel:
Property Listings: A clean, browsable page showcasing all properties with key details.
Investment Flow: A step-by-step process for selecting a property, choosing an investment amount, and confirming the purchase.
Dashboard: A personalized dashboard showing portfolio value, holdings, and rental distribution history.
Seller Panel (New Feature):
Property Submission Form: A multi-step form where sellers can input property details and securely upload documents.[34][35][36][37][38]
Basic information (address, price, size).
Detailed descriptions and photos.
An upload feature for legal documents (e.g., property deeds).
Submission Tracking: A dashboard for sellers to track their property's status (e.g., "Pending Review," "Approved," "Listed").
Tokenization Preview: After submission, show a preview of the calculated token breakdown.
User Flows:
Investor Flow: Register -> KYC -> Browse Properties -> Invest -> View Dashboard.
Seller Flow: Register -> KYC -> Access Seller Panel -> Submit Property -> Track Status.
3. Overall Architecture:
System Design: Use a microservices-inspired architecture. Your FastAPI backend will communicate with the XRP Ledger Testnet and the local MongoDB database. The React frontend will interact with the backend via API endpoints.
Security: Implement basic security measures. Use JWT for user authentication.[20][21][22][39] Handle user credentials with proper hashing and salting. Use environment variables for all sensitive information (e.g., database connection string, XRPL wallet secrets).
4. Simplified Context:
Regulatory Abstraction: Do not use any government-specific terms. Instead, refer to a simplified concept like an "internal review process" or "document verification." The focus is purely on the technical implementation.
Property Onboarding: The property owner (seller) uploads legal documents to the platform. The system will then simulate a "review and approval" process (e.g., an admin-level API endpoint could be used to change the property's status from "Pending Review" to "Approved"). Once approved, the property is listed for tokenization.